/**
 * @file       IBasicProof.hpp
 * @brief      Base proof class header file
 * @date       2024-09-29
 * @author     Henrique A. Klein (hklein@gnus.ai)
 */

#ifndef _IBASIC_PROOF_HPP_
#define _IBASIC_PROOF_HPP_
#include <string>
#include <vector>
#include <cstdint>
#include <memory>
#include <utility>
#include <boost/json.hpp>
#include "proof/proto/SGProof.pb.h"
#include "outcome/outcome.hpp"

namespace sgns
{
    /**
     * @class IBasicProof
     * @brief Base proof class header file
     *
     * This class provides methods for generating full proofs and verifying them, 
     * along with virtual methods for derived proofs
     */
    class IBasicProof
    {
    public:
        /**
         * @brief   Alias for the de-serializer method type to be implemented in derived classes
         */
        using PublicParamDeserializeFn = std::function<
            outcome::result<std::pair<boost::json::array, boost::json::array>>( const std::vector<uint8_t> & )>;

        /**
         * @brief       Constructs a proof and informs the bytecode that will be used
         * @param[in]   bytecode_payload: Bytecode generated by zkllvm's modified clang
         */
        explicit IBasicProof( std::string bytecode_payload );

        /**
         * @brief       Virtual destructor for IBasicProof.
         */
        virtual ~IBasicProof() = default;

        /**
         * @enum        Error
         * @brief       Enumeration of error codes used in the proof classes.
         */
        enum class Error
        {
            INSUFFICIENT_FUNDS = 0,   ///< Insufficient funds error.
            INVALID_PROOF,            ///< Invalid proof error.
            BYTECODE_NOT_FOUND,       ///< Bytecode not found error.
            INVALID_CIRCUIT,          ///< Invalid circuit error.
            INVALID_PROTO_PROOF,      ///< Invalid protobuf proof error.
            INVALID_PROOF_TYPE,       ///< Invalid proof type error.
            UNEXPECTED_PROOF_TYPE,    ///< Unexpected proof type error.
            INVALID_PUBLIC_PARAMETERS ///< Invalid public parameters error.
        };

        /**
         * @brief       Pure virtual function to get the proof type.
         * @return      A string representing the type of proof.
         */
        virtual std::string GetProofType() const = 0;

        /**
         * @brief       Generates a full proof using the internal class values
         * @return      A protobuf compatible serialized vector of proof data in bytes.
         */
        outcome::result<std::vector<uint8_t>> GenerateFullProof();

        /**
         * @brief       Verifies the proof with the public parameters
         * @param[in]   full_proof_data The protobuf byte vector representing the proof data and public parameters
         * @return      If successful returns the validity of the proof. Otherwise it returns @ref IBasicProof::Error
         */
        static outcome::result<bool> VerifyFullProof( const std::vector<uint8_t> &full_proof_data );
        /**
         * @brief       Verifies the proof with the parameters and snark
         * @param[in]   parameters The deserialized array of public parameters and zeroed private parameters
         * @param[in]   snark The deserialized snark
         * @return      If successful returns the validity of the proof. Otherwise it returns @ref IBasicProof::Error
         */
        static outcome::result<bool> VerifyFullProof(
            const std::pair<boost::json::array, boost::json::array> &parameters,
            const SGProof::BaseProofData                            &proof_data,
            std::string                                              proof_bytecode );

        /**
         * @brief       Generates a JSON object for an integer parameter.
         * @param[in]   value The integer value to be converted to a JSON object.
         * @return      A JSON object containing the parameter.
         */
        static boost::json::object GenerateIntParameter( uint64_t value );

        /**
         * @brief       Generates a JSON object for an array parameter.
         * @param[in]   values The array of values to be converted to a JSON object.
         * @return      A JSON object containing the array parameter.
         */
        template <std::size_t N>
        static boost::json::object GenerateArrayParameter( const std::array<uint64_t, N> &values );

        /**
         * @brief       Generates a JSON object for a field parameter.
         * @param[in]   value The field value to be converted to a JSON object.
         * @return      A JSON object containing the field parameter.
         */
        static boost::json::object GenerateFieldParameter( uint64_t value );

    protected:
        /** 
         * @brief       A map of deserialization functions for public parameters by proof type.
         */
        static inline std::map<std::string, PublicParamDeserializeFn> PublicParamDeSerializers;

        /** 
         * @brief       A map of bytecodes associated with each proof type.
         */
        static inline std::map<std::string, std::string> ByteCodeMap;

        /**
         * @brief       Registers a deserializer function for a specific proof type.
         * @param[in]   proof_type The proof type for which the deserializer is registered.
         * @param[in]   fn The deserializer function to be registered.
         */
        static void RegisterDeserializer( const std::string &proof_type, PublicParamDeserializeFn fn )
        {
            PublicParamDeSerializers[proof_type] = fn;
        }

        /**
         * @brief       Registers a bytecode for a specific proof type.
         * @param[in]   proof_type The proof type for which the bytecode is registered.
         * @param[in]   bytecode The bytecode to be registered.
         */
        static void RegisterBytecode( const std::string &proof_type, std::string bytecode )
        {
            ByteCodeMap[proof_type] = std::move( bytecode );
        }

    protected:
        /**
         * @brief       Deserializes a BaseProofProto from the provided proof data.
         * @param[in]   proof_data The byte vector representing the proof data.
         * @return      A result containing the deserialized BaseProofProto.
         */
        static outcome::result<SGProof::BaseProofProto> DeSerializeBaseProof( const std::vector<uint8_t> &proof_data );

        /**
         * @brief       Pure virtual function to serialize a full proof using the snark and internal public parameters
         * @param[in]   base_proof_data The snark that will be embedded on the proof data
         * @return      A result containing the serialized full proof data in bytes.
         */
        virtual outcome::result<std::vector<uint8_t>> SerializeFullProof(
            const SGProof::BaseProofData &base_proof_data ) = 0;

    private:
        const std::string bytecode_payload_; ///< The bytecode generated by the modified clang

        /**
         * @brief       Generates the base proof (snark) structure using the internal class data.
         * @return      A result containing the generated BaseProofData.
         */
        outcome::result<SGProof::BaseProofData> GenerateProof();

        /**
         * @brief       Pure virtual function to generate the parameters in JSON form
         * @return      A pair of JSON arrays representing the public and private parameters consecutively 
         */
        virtual std::pair<boost::json::array, boost::json::array> GenerateJsonParameters() = 0;
    };

}

/**
 * @brief       Macro for declaring error handling in the IBasicProof class.
 */
OUTCOME_HPP_DECLARE_ERROR_2( sgns, IBasicProof::Error );

#endif
