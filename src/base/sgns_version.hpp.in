/**
 * @file version.hpp
 * @brief Contains version information for the SuperGenius project.
 *
 * This header file defines the version components and related macros for the
 * SuperGenius project. It follows semantic versioning:
 * - **Major**: Incompatible API changes.
 * - **Minor**: New features in a backwards-compatible manner.
 * - **Patch**: Backwards-compatible bug fixes.
 *
 * Additional fields include a pre-release identifier (e.g., "-alpha", "-beta", "-rc"),
 * build metadata (e.g., commit hash, build date), and a release date. These are
 * incorporated into both string and numeric representations.
 *
 * @note This file is auto-generated. Do not edit manually.
 */

#ifndef SUPERGENIUS_VERSION_HPP
#define SUPERGENIUS_VERSION_HPP
#pragma once

#ifdef __cplusplus
extern "C" {
#endif

/// Major version number. 
#define SUPERGENIUS_VERSION_MAJOR @SUPERGENIUS_VERSION_MAJOR@

/// Minor version number. 
#define SUPERGENIUS_VERSION_MINOR @SUPERGENIUS_VERSION_MINOR@

/// Patch version number. 
#define SUPERGENIUS_VERSION_PATCH @SUPERGENIUS_VERSION_PATCH@

/**
 * Pre-release identifier.
 *
 * Should be empty for stable releases (e.g., "", "-alpha", "-beta", "-rc").
 */
#define SUPERGENIUS_VERSION_PRE_RELEASE "@SUPERGENIUS_VERSION_PRE_RELEASE@"

/**
 * Build metadata.
 *
 * Optional information such as commit hash or build date. May be empty.
 */
#define SUPERGENIUS_VERSION_BUILD_METADATA "@SUPERGENIUS_VERSION_BUILD_METADATA@"

/**
 * Release date.
 *
 * Typically formatted as YYYYMMDD.
 */
#define SUPERGENIUS_RELEASE_DATE "@SUPERGENIUS_RELEASE_DATE@"

/**
 * Shared library (ABI) version.
 *
 * Often aligned with the major version.
 */
#define SUPERGENIUS_SHLIB_VERSION SUPERGENIUS_VERSION_MAJOR

/**
 * Short version string: "MAJOR.MINOR.PATCH".
 */
#define SUPERGENIUS_VERSION_STR "@SUPERGENIUS_VERSION_MAJOR@.@SUPERGENIUS_VERSION_MINOR@.@SUPERGENIUS_VERSION_PATCH@"

/**
 * Full version string including pre-release and build metadata.
 */
#define SUPERGENIUS_FULL_VERSION_STR \
    "@SUPERGENIUS_VERSION_MAJOR@.@SUPERGENIUS_VERSION_MINOR@.@SUPERGENIUS_VERSION_PATCH@" \
    "@SUPERGENIUS_VERSION_PRE_RELEASE@@SUPERGENIUS_VERSION_BUILD_METADATA@"

/**
 * Version text for display purposes.
 */
#define SUPERGENIUS_VERSION_TEXT "SuperGenius " SUPERGENIUS_FULL_VERSION_STR " (" SUPERGENIUS_RELEASE_DATE ")"

/*
 * This macro synthesizes a numeric version identifier with the layout:
 * 0xMNN00PPS, where:
 *  - M (4 bits) is the major version.
 *  - NN (8 bits) is the minor version.
 *  - PP (8 bits) is the patch version.
 *  - S (4 bits) is the pre-release flag: 0x0 for a pre-release and 0xF for a stable release.
 *
 * This is useful for compile-time version comparisons.
 */
#ifdef SUPERGENIUS_VERSION_PRE_RELEASE
  /* If a pre-release identifier is defined (even if empty, build systems can override this logic) */
# define _SUPERGENIUS_VERSION_PRERELEASE_FLAG 0x0L
#else
# define _SUPERGENIUS_VERSION_PRERELEASE_FLAG 0xFL
#endif

#define SUPERGENIUS_VERSION_NUMBER \
    ((SUPERGENIUS_VERSION_MAJOR << 28) | (SUPERGENIUS_VERSION_MINOR << 20) | (SUPERGENIUS_VERSION_PATCH << 4) | _SUPERGENIUS_VERSION_PRERELEASE_FLAG)

/**
 * Check for minimum version requirement.
 *
 * Evaluates to true if the current version is greater than or equal to the
 * specified major and minor version.
 *
 * @param maj Required major version.
 * @param min Required minor version.
 */
#define SUPERGENIUS_VERSION_PREREQ(maj, min) \
    (((SUPERGENIUS_VERSION_MAJOR << 16) | SUPERGENIUS_VERSION_MINOR) >= (((maj) << 16) | (min)))

#ifdef __cplusplus
}
#endif

#endif // SUPERGENIUS_VERSION_HPP
