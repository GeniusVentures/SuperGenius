syntax = "proto3";

package SGProcessing;

//import "google/protobuf/empty.proto";

// Work distribution
// Task messages are published/received in data feed (lobby) channel
message Task 
{
    string ipfs_block_id = 1;// source block data to be processed
    uint32 block_len = 2; // and ipfs block's length in bytes
    uint32 block_stride = 3; // Stride to use for access pattern
    uint32 block_line_stride = 4; // Line stride in bytes to get to next block start
    float random_seed = 5; // used to randomly choose verifier block
    string results_channel = 6; // which channel to publish results to.
}

message TaskLock
{
    string task_id = 1;
    int64 lock_timestamp = 2;
}

// Subtask is pubished by host into ipfs_block_id channel
message SubTask 
{
    string ipfsblock = 1; // source block data to be processed
    repeated ProcessingChunk chunksToProcess = 2; // array of chunks to process
    uint32 datalen = 3; // length of ipfsBlock?
    string subtaskid = 4; // unique subtask ID
}

message ProcessingChunk 
{
    string chunkid = 1; // unique process chunk ID
    uint32 offset = 2; // offset into data
    uint32 subchunk_width = 3; // width of subchunk/subblock
    uint32 subchunk_height = 4; // height of chunk/block
    uint32 stride = 5; // stride to use for overall data chunk
    uint32 line_stride = 6; // stride of one line of data
    uint32 n_subchunks = 7; // number of chunks to process  
}

message ProcessingQueueItem
{
    int64 lock_timestamp = 1;
    string lock_node_id = 2;
}


message ProcessingQueue
{
    repeated ProcessingQueueItem items = 1;
    int64 last_update_timestamp = 2;
    string owner_node_id = 3;
}

message SubTaskCollection
{
    repeated SubTask items = 1;
}

message SubTaskQueue
{
    ProcessingQueue processing_queue = 1;
    SubTaskCollection subtasks = 2;
}

message SubTaskQueueRequest
{
    string node_id = 1;
}

// SubTask results are published to result_channel
message SubTaskResult
{
    uint32 result_hash = 1; // hash of results
    repeated uint32 chunk_hashes = 2; // the hashes for each chunk
    string ipfs_results_data_id = 3; // UUID of the results data on ipfs
    string subtaskid = 4; // linked subtask id
}

message SubTaskState
{
    enum Type
    {
        NONE = 0;
        ENQUEUED = 1;
        PROCESSING = 2;
        PROCESSED = 3;
        COMPLETE = 4;
    }
    Type state = 1;
    int64 timestamp = 2;
}

message TaskResult
{
    repeated SubTaskResult subtask_results = 1;
}

// Processing service handling
// Request for available processing channels
message ProcessingChannelRequest
{
    string environment = 1; // environment description required for a task processing
}

message ProcessingChannelResponse
{
    string channel_id = 1; // Processing channel Id
}

message GridChannelMessage
{
    oneof data 
    {
        ProcessingChannelRequest processing_channel_request = 1;
        ProcessingChannelResponse processing_channel_response = 2;
    }
}

message ProcessingNode
{
    string node_id = 1;
    uint64 timestamp = 2;
}

message ProcessingChannelMessage
{
    oneof data
    {
        SubTaskQueue subtask_queue = 1;
        SubTaskQueueRequest subtask_queue_request = 2;
    }
}
