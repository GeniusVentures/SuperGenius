name: Release Build CI

on:
  push:
    branches:
      - develop
      - main
    paths-ignore:
      - ".github/**"
      - "Readme.md"
  pull_request:
    branches:
      - develop
      - main
    paths-ignore:
      - ".github/**"
      - "Readme.md"
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag"
        required: false
        type: string

jobs:
  build:
    env:
      GRPC_BUILD_ENABLE_CCACHE: "ON"
      GH_TOKEN: ${{ secrets.GNUS_TOKEN_1 }}
    runs-on: ${{matrix.host}}
    container:
      image: ${{matrix.container}}
      credentials:
        username: ${{github.actor}}
        password: ${{secrets.GNUS_TOKEN_1}}
    strategy:
      fail-fast: false
      matrix:
        target: [Android, iOS, OSX, Linux, Windows]
        build-type: [Debug,Release]
        abi: [""]
        include:
          - target: Linux
            host: ubuntu-22.04
            abi: "x86_64"
            build-type: "Release"
          - target: Linux
            host: ubuntu-22.04
            abi: "x86_64"
            build-type: "Debug"
          - target: Linux
            host: ubuntu-24.04-arm
            abi: "aarch64"
            build-type: "Release"
            container: ghcr.io/geniusventures/debian-bullseye:latest
          - target: Linux
            host: ubuntu-24.04-arm
            abi: "aarch64"
            build-type: "Debug"
            container: ghcr.io/geniusventures/debian-bullseye:latest
          - target: Windows
            host: windows-latest
          - target: OSX
            host: macos-latest
          - target: Android
            host: ubuntu-22.04
            abi: arm64-v8a
            build-type: "Release"
          - target: Android
            host: gv-Linux-large
            abi: arm64-v8a
            build-type: "Debug"
          - target: Android
            host: ubuntu-22.04
            abi: armeabi-v7a
            build-type: "Release"
          - target: Android
            host: gv-Linux-large
            abi: armeabi-v7a
            build-type: "Debug"
          - target: iOS
            host: macos-latest
        exclude:
          - target: Android
            abi: ""
          - target: Linux
            abi: ""
    steps:
      - name: Checkout SuperGenius repository
        uses: actions/checkout@v4
        with:
          path: "SuperGenius"
          submodules: "recursive"

      - name: Set build directory
        run: |
          if [ '${{matrix.abi}}' ]; then
            BUILD_DIRECTORY=build/${{matrix.target}}/${{matrix.build-type}}/${{matrix.abi}}
          else
            BUILD_DIRECTORY=build/${{matrix.target}}/${{matrix.build-type}}
          fi
          echo "BUILD_DIRECTORY=$BUILD_DIRECTORY" >> $GITHUB_ENV
        shell: bash

      - name: Download thirdparty release
        working-directory: ${{github.workspace}}
        run: |
          # Determine current branch or tag
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.tag }}" ]; then
              CURRENT_BRANCH="${{ github.event.inputs.tag }}"
              IS_TAG=true
          elif ${{github.event_name == 'pull_request'}}; then
              CURRENT_BRANCH=${{ github.event.pull_request.head.ref }}
              IS_TAG=false
          else
              CURRENT_BRANCH=$GITHUB_REF_NAME
              IS_TAG=false
          fi

          echo "Identified current branch/tag as ${CURRENT_BRANCH}"
          echo "CURRENT_BRANCH=${CURRENT_BRANCH}" >>$GITHUB_ENV
          echo "IS_TAG=${IS_TAG}" >>$GITHUB_ENV

          # Determine thirdparty branch to use
          if [ "$IS_TAG" == "true" ]; then
            # For tags, use the exact tag name for thirdparty
            thirdparty_branch="$CURRENT_BRANCH"
          elif [ "$CURRENT_BRANCH" == "main" ]; then
            thirdparty_branch="main"
          else
            thirdparty_branch="develop"
          fi

          echo "Using ${thirdparty_branch} for thirdparty"

          if [ '${{matrix.abi}}' ]; then
            FILE_NAME=${{matrix.target}}-${{matrix.abi}}-${{matrix.build-type}}.tar.gz
          else
            FILE_NAME=${{matrix.target}}-${{matrix.build-type}}.tar.gz
          fi
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          mkdir thirdparty
          cd thirdparty

          if [ "$IS_TAG" == "true" ]; then
            # For tags, use just the tag name
            tag_name="${thirdparty_branch}"
          else
            # For branches, use the platform-branch-buildtype format
            tag_name="${{matrix.target}}-${thirdparty_branch}-${{matrix.build-type}}"
          fi

          gh release download ${tag_name} --repo GeniusVentures/thirdparty -p "${FILE_NAME}"
          tar -zxvf "${FILE_NAME}"
          
          # Set THIRDPARTY_BUILD_DIR to the actual location where files were extracted
          
          if [ "${{ matrix.target }}" = "Windows" ]; then
            # Convert Unix path to Windows path for Windows builds
            echo "THIRDPARTY_BUILD_DIR=$(pwd -W)/${BUILD_DIRECTORY}" >> $GITHUB_ENV
          else
            echo "THIRDPARTY_BUILD_DIR=$(pwd)/${BUILD_DIRECTORY}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Download zkLLVM release
        working-directory: ${{github.workspace}}
        run: |
          # Use same branch determination logic for zkLLVM
          if [ "$IS_TAG" == "true" ]; then
            # For tags, use the exact tag name for zkLLVM
            zkLLVM_branch="$CURRENT_BRANCH"
          elif [ "$CURRENT_BRANCH" == "main" ]; then
            zkLLVM_branch="main"
          else
            zkLLVM_branch="develop"
          fi

          mkdir zkLLVM
          cd zkLLVM

          if [ "${{ matrix.target }}" = "Windows" ]; then
              ZKLLVM_FILE_NAME=${{matrix.target}}-${{matrix.build-type}}.tar.gz
              ZKLLVM_BUILD_DIR=build/${{matrix.target}}/${{matrix.build-type}}
              if [ "$IS_TAG" == "true" ]; then
                tag_name="${zkLLVM_branch}"
              else
                tag_name=${{matrix.target}}-${zkLLVM_branch}-${{matrix.build-type}}
              fi
          elif [ '${{matrix.abi}}' ]; then
              ZKLLVM_FILE_NAME=${{matrix.target}}-${{matrix.abi}}-Release.tar.gz
              ZKLLVM_BUILD_DIR=build/${{matrix.target}}/Release/${{matrix.abi}}
              if [ "$IS_TAG" == "true" ]; then
                tag_name="${zkLLVM_branch}"
              else
                tag_name=${{matrix.target}}-${zkLLVM_branch}-Release
              fi
          else
              ZKLLVM_FILE_NAME=${{matrix.target}}-Release.tar.gz
              ZKLLVM_BUILD_DIR=build/${{matrix.target}}/Release
              if [ "$IS_TAG" == "true" ]; then
                tag_name="${zkLLVM_branch}"
              else
                tag_name=${{matrix.target}}-${zkLLVM_branch}-Release
              fi
          fi

          gh release download ${tag_name} --repo GeniusVentures/zkLLVM -p "${ZKLLVM_FILE_NAME}"

          tar --exclude='*bin/assigner' --exclude='*bin/clang-zkllvm' --exclude='*bin/llvm-link-zkllvm' --exclude='*bin/transpiler' -xzf "${ZKLLVM_FILE_NAME}"
          
          # Set ZKLLVM_BUILD_DIR to the actual location where files were extracted
          
          if [ "${{ matrix.target }}" = "Windows" ]; then
            # Convert Unix path to Windows path for Windows builds
            echo "ZKLLVM_BUILD_DIR=$(pwd -W)/${ZKLLVM_BUILD_DIR}" >> $GITHUB_ENV
          else
            echo "ZKLLVM_BUILD_DIR=$(pwd)/${ZKLLVM_BUILD_DIR}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Configure Linux host
        if: ${{ runner.os == 'Linux'}}
        run: |
          sudo update-alternatives --install /usr/bin/cc cc $(which clang) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++) 100
          sudo update-alternatives --set cc $(which clang)
          sudo update-alternatives --set c++ $(which clang++)
           
          sudo apt install ccache ninja-build libvulkan-dev -y
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Configure Windows host
        if: ${{ runner.os == 'Windows'}}
        run: |
          choco install ccache -A

      - name: Configure macOS host
        if: ${{ runner.os == 'macOS'}}
        run: |
          brew install ccache ninja bash
          PATH="$HOMEBREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Add Darwin toolchain
        if: ${{ matrix.target == 'OSX'}}
        run: rustup target add x86_64-apple-darwin

      - name: Add iOS toolchain
        if: ${{ matrix.target == 'iOS' }}
        run: |
          rustup toolchain install nightly-aarch64-apple-darwin
          rustup component add rust-src --toolchain nightly-aarch64-apple-darwin
          rustup target add aarch64-apple-ios

      - name: Add Android toolchain
        if: ${{ matrix.target == 'Android' }}
        run: |
          rustup target add aarch64-linux-android

      - name: Install bindgen
        run: cargo install cbindgen

      - name: Add wasm Rust target
        run: rustup target add wasm32-unknown-emscripten

      - name: Configure CMake for Android
        if: ${{ matrix.target == 'Android'}}
        working-directory: ${{github.workspace}}/SuperGenius
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DANDROID_ABI=${{matrix.abi}} -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DZKLLVM_BUILD_DIR=${{env.ZKLLVM_BUILD_DIR}}

      - name: Configure CMake for Mac
        if: ${{ matrix.target == 'OSX'}}
        working-directory: ${{github.workspace}}/SuperGenius
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DPLATFORM=MAC_UNIVERSAL -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DZKLLVM_BUILD_DIR=${{env.ZKLLVM_BUILD_DIR}}

      - name: Configure CMake for iOS
        if: ${{ matrix.target == 'iOS'}}
        working-directory: ${{github.workspace}}/SuperGenius
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DPLATFORM=OS64 -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DZKLLVM_BUILD_DIR=${{env.ZKLLVM_BUILD_DIR}}

      - name: Configure CMake for Linux
        if: ${{matrix.target == 'Linux'}}
        working-directory: ${{github.workspace}}/SuperGenius
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DZKLLVM_BUILD_DIR=${{env.ZKLLVM_BUILD_DIR}}

      - name: Configure CMake for Windows
        if: ${{matrix.target == 'Windows'}}
        working-directory: ${{github.workspace}}/SuperGenius
        run: cmake -S build/${{matrix.target}} -B $env:BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DTHIRDPARTY_BUILD_DIR=${{env.THIRDPARTY_BUILD_DIR}} -DZKLLVM_BUILD_DIR=${{env.ZKLLVM_BUILD_DIR}}

      - name: Build SuperGenius
        working-directory: ${{github.workspace}}/SuperGenius/${{env.BUILD_DIRECTORY}}
        run: cmake --build . --config ${{matrix.build-type}} -j

      - name: Install SuperGenius
        working-directory: ${{github.workspace}}/SuperGenius/${{env.BUILD_DIRECTORY}}
        run: cmake --install . --config ${{matrix.build-type}}

      - name: Compress build artifacts
        working-directory: ${{github.workspace}}/SuperGenius/${{env.BUILD_DIRECTORY}}
        if: github.ref_name == 'main' || github.ref_name == 'develop' || env.IS_TAG == 'true'
        run: |
          tar --exclude=.git -czvf ${FILE_NAME} --transform 's|^|${{env.BUILD_DIRECTORY}}/|' SuperGenius/
        shell: bash

      - name: Release file
        if: github.ref_name == 'main' || github.ref_name == 'develop' || env.IS_TAG == 'true'
        working-directory: ${{github.workspace}}/SuperGenius/${{env.BUILD_DIRECTORY}}
        shell: bash
        run: |
          # Determine release tag
          if [ "$IS_TAG" == "true" ]; then
              # Use the provided tag as-is
              RELEASE_TAG='${{ github.event.inputs.tag }}'
          else
              # Use branch-based naming for regular builds
              RELEASE_TAG='${{matrix.target}}-${{github.ref_name}}-${{matrix.build-type}}'
          fi

          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

          # Check if release exists
          if ! gh release view $RELEASE_TAG; then
              echo "Release not found, creating with tag: $RELEASE_TAG"

              if [ '${{ matrix.build-type }}' != 'Release' ]; then
                  RELEASE_TYPE="--prerelease"
              else
                  RELEASE_TYPE="--latest"
              fi

              # Create release with appropriate target
              if [ "$IS_TAG" == "true" ]; then
                  # For tag-based releases, create at the current commit
                  gh release create $RELEASE_TAG \
                      -n "Tag release: ${CURRENT_BRANCH}" \
                      ${RELEASE_TYPE} \
                      -t "${{ matrix.target }} tag ${CURRENT_BRANCH} ${{ matrix.build-type }} build"
              else
                  # For branch-based releases, target the branch
                  gh release create $RELEASE_TAG \
                      -n "${CURRENT_BRANCH} branch" \
                      --target "${CURRENT_BRANCH}" \
                      ${RELEASE_TYPE} \
                      -t "${{ matrix.target }} ${CURRENT_BRANCH} branch ${{ matrix.build-type }} build"
              fi
          fi

          echo -e "Uploading ${FILE_NAME}"
          gh release upload --clobber ${RELEASE_TAG} ${FILE_NAME}